const moment = require('moment-timezone');
const logger = require('./logger');

class CommandHandler {
  constructor(database, summaryService) {
    this.db = database;
    this.summaryService = summaryService;
  }

  async handleStart(bot, msg) {
    const welcomeMessage = `
ü§ñ *Welcome to Telegram Summary Bot!*

I can create AI\\-powered summaries of your chat conversations using OpenAI \\(ChatGPT\\).

*How it works:*
‚Ä¢ I automatically collect and store text messages
‚Ä¢ Use \`/summary\` to generate intelligent summaries
‚Ä¢ Summaries include key topics, important moments, and insights

*Quick Start:*
‚Ä¢ \`/summary\` \\- Generate summary of last 24 hours
‚Ä¢ \`/help\` \\- See all available commands
‚Ä¢ \`/language [code]\` \\- Set your preferred language

*Privacy:* I only store text messages, no media or personal data.

Try \`/summary\` to get started! üöÄ
    `.trim();

    bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: 'Markdown' });
  }

  async handleHelp(bot, msg) {
    const response = `
ü§ñ *Telegram Summary Bot*

*Available Commands:*

üìù *Summary Generation*
‚Ä¢ \`/summary\` \\- Generate summary of last 24 hours
‚Ä¢ \`/summary 6h\` \\- Summary of last 6 hours
‚Ä¢ \`/summary today\` \\- Summary of today only
‚Ä¢ \`/summary yesterday\` \\- Summary of yesterday
‚Ä¢ \`/summary 3d\` \\- Summary of last 3 days

‚öôÔ∏è *Configuration* \\(Admin only\\)
‚Ä¢ \`/language [code]\` \\- Set summary language
‚Ä¢ \`/length [number]\` \\- Set summary detail level
‚Ä¢ \`/timezone [code]\` \\- Set timezone for date formatting
‚Ä¢ \`/schedule [option]\` \\- Set automatic summaries

üìä *Information*
‚Ä¢ \`/stats\` \\- Show chat statistics
‚Ä¢ \`/clear\` \\- Clear chat history \\(Admin only\\)

*Examples:*
‚Ä¢ \`/summary 12h\` \\- Last 12 hours
‚Ä¢ \`/language es\` \\- Spanish summaries
‚Ä¢ \`/length 2000\` \\- Detailed summaries
‚Ä¢ \`/schedule daily\` \\- Daily auto\\-summaries

*Supported Languages:* en, es, fr, de, it, pt, ru, ja, ko, zh, ar, hi, uk, pl, nl, tr
    `.trim();

    bot.sendMessage(msg.chat.id, response, { parse_mode: 'Markdown' });
  }

  async handleSummary(bot, msg, period) {
    const chatId = msg.chat.id;
    
    // Show typing indicator
    bot.sendChatAction(chatId, 'typing');

    try {
      // Check daily summary limit (10 per day)
      const dailyCount = await this.db.getDailySummaryCount(chatId);
      const DAILY_LIMIT = 10;
      
      if (dailyCount >= DAILY_LIMIT) {
        const response = `üö´ Daily summary limit reached! 

You've used ${dailyCount}/${DAILY_LIMIT} summaries today.

‚è∞ Daily limit resets at midnight (UTC).
üìÖ Try again tomorrow or upgrade for unlimited summaries.

üí° Tip: Use longer time periods (like /summary 7d) to get more comprehensive summaries.`;
        
        bot.sendMessage(chatId, response);
        return;
      }

      // Increment summary count for today
      await this.db.incrementSummaryCount(chatId);

      const timeRange = this.parseTimePeriod(period || '24h');
      const messages = await this.db.getMessages(
        chatId, 
        timeRange.start, 
        timeRange.end
      );

      if (messages.length === 0) {
        bot.sendMessage(chatId, 'üì≠ No messages found for the specified time period.');
        return;
      }

      // Get chat settings for language preference
      const settings = await this.db.getChatSettings(chatId);
      
      // Generate summary using OpenAI service
      const summary = await this.summaryService.generateSummary(messages, {
        language: settings.language,
        maxLength: settings.summary_length
      });
      
      const translations = this.getTranslations(settings.language);
      const dateFormat = this.getLocalizedDate(timeRange.start, timeRange.end, settings.language, settings.timezone);
      
      // Temporarily disable clickable timecodes to fix Markdown parsing error
      // const processedSummary = this.summaryService.postProcessSummary(summary, messages, chatId);
      const processedSummary = summary;
      
      const response = `
üìù ${translations.chatSummary} (${this.translateTimePeriod(timeRange.description, settings.language)})
üìÖ ${dateFormat}
üí¨ ${messages.length} ${translations.messagesAnalyzed}

${processedSummary}
      `.trim();

      // Send as plain text without any formatting
      bot.sendMessage(chatId, response);
      
    } catch (error) {
      logger.error('Error in handleSummary:', error);
      bot.sendMessage(chatId, '‚ùå Error generating summary. Please try again later.');
    }
  }

  async handleStats(bot, msg) {
    const chatId = msg.chat.id;

    try {
      const stats = await this.db.getChatStats(chatId);
      
      if (stats.total_messages === 0) {
        bot.sendMessage(chatId, 'üìä No messages stored yet. Start chatting to see statistics!');
        return;
      }

      const firstMessage = moment.unix(stats.first_message).format('MMM DD, YYYY HH:mm');
      const lastMessage = moment.unix(stats.last_message).format('MMM DD, YYYY HH:mm');
      
      const response = `
üìä *Chat Statistics*

üí¨ Total messages: ${stats.total_messages}
üë• Unique users: ${stats.unique_users}
üìÖ First message: ${firstMessage}
üïê Last message: ${lastMessage}
üìà Collection period: ${moment.unix(stats.first_message).fromNow()}
      `.trim();

      bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      
    } catch (error) {
      logger.error('Error in handleStats:', error);
      bot.sendMessage(chatId, '‚ùå Error retrieving statistics.');
    }
  }

  async handleClear(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check if user is admin or bot owner
    const isAdminUser = await this.isAdmin(bot, chatId, userId);
    const isOwner = await this.isBotOwner(userId);
    
    if (!isAdminUser && !isOwner) {
      bot.sendMessage(chatId, 'üö´ Only chat administrators can clear chat history. Please ask an admin to clear the messages.');
      return;
    }

    try {
      const deletedCount = await this.db.clearChatHistory(chatId);
      bot.sendMessage(chatId, `üóëÔ∏è Cleared ${deletedCount} messages from chat history.`);
    } catch (error) {
      logger.error('Error in handleClear:', error);
      bot.sendMessage(chatId, '‚ùå Error clearing chat history.');
    }
  }

  async handleLanguage(bot, msg, languageCode) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check if user is admin or bot owner
    const isAdminUser = await this.isAdmin(bot, chatId, userId);
    const isOwner = await this.isBotOwner(userId);
    
    if (!isAdminUser && !isOwner) {
      bot.sendMessage(chatId, 'üö´ Only chat administrators can change bot settings. Please ask an admin to configure the language.');
      return;
    }

    const supportedLanguages = {
      'en': 'üá∫üá∏ English',
      'es': 'üá™üá∏ Spanish',
      'fr': 'üá´üá∑ French', 
      'de': 'üá©üá™ German',
      'it': 'üáÆüáπ Italian',
      'pt': 'üáµüáπ Portuguese',
      'ru': 'üá∑üá∫ Russian',
      'ja': 'üáØüáµ Japanese',
      'ko': 'üá∞üá∑ Korean',
      'zh': 'üá®üá≥ Chinese',
      'ar': 'üá∏üá¶ Arabic',
      'hi': 'üáÆüá≥ Hindi',
      'uk': 'üá∫üá¶ Ukrainian',
      'pl': 'üáµüá± Polish',
      'nl': 'üá≥üá± Dutch',
      'tr': 'üáπüá∑ Turkish'
    };

    try {
      if (!languageCode) {
        // Show current language and available options
        const settings = await this.db.getChatSettings(chatId);
        const currentLang = supportedLanguages[settings.language] || 'üá∫üá∏ English';
        
        const languageList = Object.entries(supportedLanguages)
          .map(([code, name]) => `‚Ä¢ /language ${code} - ${name}`)
          .join('\n');
        
        const response = `
üåç *Current Language:* ${currentLang}

*Available languages:*
${languageList}

*Usage:* \`/language [code]\`
*Example:* \`/language es\`
        `.trim();
        
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        return;
      }

      if (!supportedLanguages[languageCode]) {
        bot.sendMessage(chatId, `‚ùå Language "${languageCode}" is not supported. Use /language to see available languages.`);
        return;
      }

      await this.db.setChatLanguage(chatId, languageCode);
      const languageName = supportedLanguages[languageCode];
      bot.sendMessage(chatId, `‚úÖ Language set to ${languageName}. Future summaries will be in this language.`);
      
    } catch (error) {
      logger.error('Error in handleLanguage:', error);
      bot.sendMessage(chatId, '‚ùå Error setting language preference.');
    }
  }

  async handleLength(bot, msg, lengthValue) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check if user is admin or bot owner
    const isAdminUser = await this.isAdmin(bot, chatId, userId);
    const isOwner = await this.isBotOwner(userId);
    
    if (!isAdminUser && !isOwner) {
      bot.sendMessage(chatId, 'üö´ Only chat administrators can change bot settings. Please ask an admin to configure the summary length.');
      return;
    }

    try {
      if (!lengthValue) {
        // Show current length and available options
        const settings = await this.db.getChatSettings(chatId);
        
        const response = `
üìè *Current Summary Length:* ${settings.summary_length} characters

*Available options:*
‚Ä¢ \`/length 800\` \\- Short summaries
‚Ä¢ \`/length 1500\` \\- Medium summaries \\(default\\)
‚Ä¢ \`/length 2500\` \\- Long summaries  
‚Ä¢ \`/length 4000\` \\- Very detailed summaries

*Usage:* \`/length [number]\`
*Example:* \`/length 2000\`

*Note:* Longer summaries provide more detail but take more time to generate.
        `.trim();
        
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        return;
      }

      const length = parseInt(lengthValue);
      
      if (isNaN(length) || length < 200 || length > 5000) {
        bot.sendMessage(chatId, '‚ùå Please enter a number between 200 and 5000 characters.');
        return;
      }

      await this.db.setSummaryLength(chatId, length);
      bot.sendMessage(chatId, `‚úÖ Summary length set to ${length} characters. Future summaries will be ${length < 1000 ? 'shorter and more concise' : length < 2000 ? 'detailed' : 'very comprehensive'}.`);
      
    } catch (error) {
      logger.error('Error in handleLength:', error);
      bot.sendMessage(chatId, '‚ùå Error setting summary length.');
    }
  }

  async handleTimezone(bot, msg, timezoneCode) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check if user is admin or bot owner
    const isAdminUser = await this.isAdmin(bot, chatId, userId);
    const isOwner = await this.isBotOwner(userId);
    
    if (!isAdminUser && !isOwner) {
      bot.sendMessage(chatId, 'üö´ Only chat administrators can change bot settings. Please ask an admin to configure the timezone.');
      return;
    }

    const supportedTimezones = {
      'UTC': 'üåç UTC (Coordinated Universal Time)',
      'Europe/Kyiv': 'üá∫üá¶ Kyiv (EET/EEST)',
      'America/New_York': 'üá∫üá∏ Eastern Time (ET)',
      'America/Chicago': 'üá∫üá∏ Central Time (CT)',
      'America/Denver': 'üá∫üá∏ Mountain Time (MT)',
      'America/Los_Angeles': 'üá∫üá∏ Pacific Time (PT)',
      'Europe/London': 'üá¨üáß London (GMT/BST)',
      'Europe/Paris': 'üá´üá∑ Paris (CET/CEST)',
      'Europe/Berlin': 'üá©üá™ Berlin (CET/CEST)',
      'Europe/Moscow': 'üá∑üá∫ Moscow (MSK)',
      'Asia/Tokyo': 'üáØüáµ Tokyo (JST)',
      'Asia/Shanghai': 'üá®üá≥ Shanghai (CST)',
      'Asia/Seoul': 'üá∞üá∑ Seoul (KST)',
      'Asia/Dubai': 'üá¶üá™ Dubai (GST)',
      'Asia/Kolkata': 'üáÆüá≥ Mumbai (IST)',
      'Australia/Sydney': 'üá¶üá∫ Sydney (AEDT/AEST)',
      'Pacific/Auckland': 'üá≥üáø Auckland (NZDT/NZST)'
    };

    try {
      if (!timezoneCode) {
        // Show current timezone and available options
        const settings = await this.db.getChatSettings(chatId);
        const currentTz = supportedTimezones[settings.timezone] || 'üåç UTC (Coordinated Universal Time)';
        
        const timezoneList = Object.entries(supportedTimezones)
          .map(([code, name]) => `‚Ä¢ \`/timezone ${code}\` \\- ${name}`)
          .join('\n');
        
        const response = `
üïê *Current Timezone:* ${currentTz}

*Available timezones:*
${timezoneList}

*Usage:* \`/timezone [code]\`
*Example:* \`/timezone Europe/London\`

*Note:* This affects how dates and times are displayed in summaries.
        `.trim();
        
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        return;
      }

      if (!supportedTimezones[timezoneCode]) {
        bot.sendMessage(chatId, `‚ùå Timezone "${timezoneCode}" is not supported. Use /timezone to see available timezones.`);
        return;
      }

      await this.db.setChatTimezone(chatId, timezoneCode);
      const timezoneName = supportedTimezones[timezoneCode];
      bot.sendMessage(chatId, `‚úÖ Timezone set to ${timezoneName}. Future summaries will use this timezone for date formatting.`);
      
    } catch (error) {
      logger.error('Error in handleTimezone:', error);
      bot.sendMessage(chatId, '‚ùå Error setting timezone preference.');
    }
  }

  async handleSchedule(bot, msg, action) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Check if user is admin or bot owner
    const isAdminUser = await this.isAdmin(bot, chatId, userId);
    const isOwner = await this.isBotOwner(userId);
    
    if (!isAdminUser && !isOwner) {
      bot.sendMessage(chatId, 'üö´ Only chat administrators can change bot settings. Please ask an admin to configure scheduled summaries.');
      return;
    }

    try {
      if (!action) {
        // Show current schedule and available options
        const schedules = await this.db.getActiveSchedules(chatId);
        
        let currentSchedule = 'None';
        if (schedules.length > 0) {
          const schedule = schedules[0];
          if (schedule.schedule_type === 'daily') {
            currentSchedule = 'Daily summaries';
          } else if (schedule.schedule_type === 'weekly') {
            currentSchedule = 'Weekly summaries';
          } else {
            currentSchedule = `Every ${schedule.interval_hours} hours`;
          }
        }
        
        const response = `
‚è∞ *Current Schedule:* ${currentSchedule}

*Available options:*
‚Ä¢ \`/schedule daily\` \\- Daily summaries at 9 AM
‚Ä¢ \`/schedule 3days\` \\- Every 3 days
‚Ä¢ \`/schedule weekly\` \\- Weekly summaries on Sunday
‚Ä¢ \`/schedule off\` \\- Cancel scheduled summaries

*Usage:* \`/schedule [option]\`
*Example:* \`/schedule daily\`

*Note:* Scheduled summaries are sent automatically to this chat.
        `.trim();
        
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        return;
      }

      if (action === 'off') {
        await this.db.deleteSchedule(chatId);
        bot.sendMessage(chatId, '‚úÖ Scheduled summaries have been cancelled.');
        return;
      }

      let scheduleType, intervalHours;
      
      switch (action) {
        case 'daily':
          scheduleType = 'daily';
          intervalHours = 24;
          break;
        case 'weekly':
          scheduleType = 'weekly';
          intervalHours = 168; // 7 days
          break;
        case '3days':
          scheduleType = 'custom';
          intervalHours = 72; // 3 days
          break;
        default:
          bot.sendMessage(chatId, '‚ùå Invalid schedule option. Use /schedule to see available options.');
          return;
      }

      await this.db.createSchedule(chatId, scheduleType, intervalHours);
      
      let scheduleText;
      switch (action) {
        case 'daily':
          scheduleText = 'daily summaries at 9 AM';
          break;
        case 'weekly':
          scheduleText = 'weekly summaries on Sunday';
          break;
        case '3days':
          scheduleText = 'summaries every 3 days';
          break;
      }
      
      bot.sendMessage(chatId, `‚úÖ Scheduled ${scheduleText}. Summaries will be sent automatically to this chat.`);
      
    } catch (error) {
      logger.error('Error in handleSchedule:', error);
      bot.sendMessage(chatId, '‚ùå Error setting schedule.');
    }
  }

  parseTimePeriod(period) {
    const now = moment();
    let start, end, description;

    if (!period) period = '24h';
    period = period.toLowerCase();

    switch (period) {
      case 'today':
        start = moment().startOf('day');
        end = now;
        description = 'Today';
        break;
      case 'yesterday':
        start = moment().subtract(1, 'day').startOf('day');
        end = moment().subtract(1, 'day').endOf('day');
        description = 'Yesterday';
        break;
      default:
        // Parse duration like "24h", "3d", "1w"
        const match = period.match(/^(\d+)([hdw])$/);
        if (match) {
          const amount = parseInt(match[1]);
          const unit = match[2];
          const unitMap = { h: 'hours', d: 'days', w: 'weeks' };
          
          start = moment().subtract(amount, unitMap[unit]);
          end = now;
          description = `Last ${amount}${unit}`;
        } else {
          // Default to 24h
          start = moment().subtract(24, 'hours');
          end = now;
          description = 'Last 24h';
        }
    }

    return {
      start: start.unix(),
      end: end.unix(),
      description
    };
  }

  getTranslations(language) {
    const translations = {
      'en': {
        chatSummary: 'Chat Summary',
        messagesAnalyzed: 'messages',
        summariesRemaining: 'summaries remaining today'
      },
      'es': {
        chatSummary: 'Resumen del Chat',
        messagesAnalyzed: 'mensajes',
        summariesRemaining: 'res√∫menes restantes hoy'
      },
      'fr': {
        chatSummary: 'R√©sum√© du Chat',
        messagesAnalyzed: 'messages',
        summariesRemaining: 'r√©sum√©s restants aujourd\'hui'
      },
      'de': {
        chatSummary: 'Chat-Zusammenfassung',
        messagesAnalyzed: 'Nachrichten',
        summariesRemaining: 'Zusammenfassungen heute √ºbrig'
      },
      'it': {
        chatSummary: 'Riassunto Chat',
        messagesAnalyzed: 'messaggi',
        summariesRemaining: 'riassunti rimanenti oggi'
      },
      'pt': {
        chatSummary: 'Resumo do Chat',
        messagesAnalyzed: 'mensagens',
        summariesRemaining: 'resumos restantes hoje'
      },
      'ru': {
        chatSummary: '–°–≤–æ–¥–∫–∞ –ß–∞—Ç–∞',
        messagesAnalyzed: '—Å–æ–æ–±—â–µ–Ω–∏–π',
        summariesRemaining: '—Å–≤–æ–¥–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è'
      },
      'ja': {
        chatSummary: '„ÉÅ„É£„ÉÉ„Éà„Çµ„Éû„É™„Éº',
        messagesAnalyzed: '„É°„ÉÉ„Çª„Éº„Ç∏',
        summariesRemaining: '‰ªäÊó•ÊÆã„Çä„ÅÆ„Çµ„Éû„É™„Éº'
      },
      'ko': {
        chatSummary: 'Ï±ÑÌåÖ ÏöîÏïΩ',
        messagesAnalyzed: 'Î©îÏãúÏßÄ',
        summariesRemaining: 'Ïò§Îäò ÎÇ®ÏùÄ ÏöîÏïΩ'
      },
      'zh': {
        chatSummary: 'ËÅäÂ§©ÊëòË¶Å',
        messagesAnalyzed: 'Êù°Ê∂àÊÅØ',
        summariesRemaining: '‰ªäÊó•Ââ©‰ΩôÊëòË¶Å'
      },
      'ar': {
        chatSummary: 'ŸÖŸÑÿÆÿµ ÿßŸÑÿØÿ±ÿØÿ¥ÿ©',
        messagesAnalyzed: 'ÿ±ÿ≥ÿßŸÑÿ©',
        summariesRemaining: 'ŸÖŸÑÿÆÿµÿßÿ™ ŸÖÿ™ÿ®ŸÇŸäÿ© ÿßŸÑŸäŸàŸÖ'
      },
      'hi': {
        chatSummary: '‡§ö‡•à‡§ü ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂',
        messagesAnalyzed: '‡§∏‡§Ç‡§¶‡•á‡§∂',
        summariesRemaining: '‡§Ü‡§ú ‡§∂‡•á‡§∑ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂'
      },
      'uk': {
        chatSummary: '–ü—ñ–¥—Å—É–º–æ–∫ –ß–∞—Ç—É',
        messagesAnalyzed: '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å',
        summariesRemaining: '–ø—ñ–¥—Å—É–º–∫—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ'
      },
      'pl': {
        chatSummary: 'Podsumowanie Czatu',
        messagesAnalyzed: 'wiadomo≈õci',
        summariesRemaining: 'podsumowa≈Ñ pozosta≈Ço dzi≈õ'
      },
      'nl': {
        chatSummary: 'Chat Samenvatting',
        messagesAnalyzed: 'berichten',
        summariesRemaining: 'samenvattingen over vandaag'
      },
      'tr': {
        chatSummary: 'Sohbet √ñzeti',
        messagesAnalyzed: 'mesaj',
        summariesRemaining: 'bug√ºn kalan √∂zet'
      }
    };

    return translations[language] || translations['en'];
  }

  translateTimePeriod(description, language) {
    const periodTranslations = {
      'en': {
        'Today': 'Today',
        'Yesterday': 'Yesterday',
        'Last 24h': 'Last 24h',
        'Last 12h': 'Last 12h',
        'Last 6h': 'Last 6h',
        'Last 3h': 'Last 3h',
        'Last 3d': 'Last 3d',
        'Last 1w': 'Last 1w',
        'Last 2w': 'Last 2w'
      },
      'es': {
        'Today': 'Hoy',
        'Yesterday': 'Ayer',
        'Last 24h': '√öltimas 24h',
        'Last 12h': '√öltimas 12h',
        'Last 6h': '√öltimas 6h',
        'Last 3h': '√öltimas 3h',
        'Last 3d': '√öltimos 3d',
        'Last 1w': '√öltima 1s',
        'Last 2w': '√öltimas 2s'
      },
      'fr': {
        'Today': 'Aujourd\'hui',
        'Yesterday': 'Hier',
        'Last 24h': 'Derni√®res 24h',
        'Last 12h': 'Derni√®res 12h',
        'Last 6h': 'Derni√®res 6h',
        'Last 3h': 'Derni√®res 3h',
        'Last 3d': 'Derniers 3j',
        'Last 1w': 'Derni√®re 1s',
        'Last 2w': 'Derni√®res 2s'
      },
      'de': {
        'Today': 'Heute',
        'Yesterday': 'Gestern',
        'Last 24h': 'Letzten 24h',
        'Last 12h': 'Letzten 12h',
        'Last 6h': 'Letzten 6h',
        'Last 3h': 'Letzten 3h',
        'Last 3d': 'Letzten 3T',
        'Last 1w': 'Letzte 1W',
        'Last 2w': 'Letzten 2W'
      },
      'it': {
        'Today': 'Oggi',
        'Yesterday': 'Ieri',
        'Last 24h': 'Ultime 24h',
        'Last 12h': 'Ultime 12h',
        'Last 6h': 'Ultime 6h',
        'Last 3h': 'Ultime 3h',
        'Last 3d': 'Ultimi 3g',
        'Last 1w': 'Ultima 1s',
        'Last 2w': 'Ultime 2s'
      },
      'pt': {
        'Today': 'Hoje',
        'Yesterday': 'Ontem',
        'Last 24h': '√öltimas 24h',
        'Last 12h': '√öltimas 12h',
        'Last 6h': '√öltimas 6h',
        'Last 3h': '√öltimas 3h',
        'Last 3d': '√öltimos 3d',
        'Last 1w': '√öltima 1s',
        'Last 2w': '√öltimas 2s'
      },
      'ru': {
        'Today': '–°–µ–≥–æ–¥–Ω—è',
        'Yesterday': '–í—á–µ—Ä–∞',
        'Last 24h': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24—á',
        'Last 12h': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 12—á',
        'Last 6h': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6—á',
        'Last 3h': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3—á',
        'Last 3d': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3–¥',
        'Last 1w': '–ü–æ—Å–ª–µ–¥–Ω—è—è 1–Ω',
        'Last 2w': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 2–Ω'
      },
      'uk': {
        'Today': '–°—å–æ–≥–æ–¥–Ω—ñ',
        'Yesterday': '–í—á–æ—Ä–∞',
        'Last 24h': '–û—Å—Ç–∞–Ω–Ω—ñ 24–≥',
        'Last 12h': '–û—Å—Ç–∞–Ω–Ω—ñ 12–≥',
        'Last 6h': '–û—Å—Ç–∞–Ω–Ω—ñ 6–≥',
        'Last 3h': '–û—Å—Ç–∞–Ω–Ω—ñ 3–≥',
        'Last 3d': '–û—Å—Ç–∞–Ω–Ω—ñ 3–¥',
        'Last 1w': '–û—Å—Ç–∞–Ω–Ω—ñ–π 1—Ç',
        'Last 2w': '–û—Å—Ç–∞–Ω–Ω—ñ 2—Ç'
      },
      'pl': {
        'Today': 'Dzisiaj',
        'Yesterday': 'Wczoraj',
        'Last 24h': 'Ostatnie 24h',
        'Last 12h': 'Ostatnie 12h',
        'Last 6h': 'Ostatnie 6h',
        'Last 3h': 'Ostatnie 3h',
        'Last 3d': 'Ostatnie 3d',
        'Last 1w': 'Ostatni 1t',
        'Last 2w': 'Ostatnie 2t'
      },
      'nl': {
        'Today': 'Vandaag',
        'Yesterday': 'Gisteren',
        'Last 24h': 'Laatste 24u',
        'Last 12h': 'Laatste 12u',
        'Last 6h': 'Laatste 6u',
        'Last 3h': 'Laatste 3u',
        'Last 3d': 'Laatste 3d',
        'Last 1w': 'Laatste 1w',
        'Last 2w': 'Laatste 2w'
      },
      'tr': {
        'Today': 'Bug√ºn',
        'Yesterday': 'D√ºn',
        'Last 24h': 'Son 24s',
        'Last 12h': 'Son 12s',
        'Last 6h': 'Son 6s',
        'Last 3h': 'Son 3s',
        'Last 3d': 'Son 3g',
        'Last 1w': 'Son 1h',
        'Last 2w': 'Son 2h'
      },
      'ja': {
        'Today': '‰ªäÊó•',
        'Yesterday': 'Êò®Êó•',
        'Last 24h': 'ÈÅéÂéª24ÊôÇÈñì',
        'Last 12h': 'ÈÅéÂéª12ÊôÇÈñì',
        'Last 6h': 'ÈÅéÂéª6ÊôÇÈñì',
        'Last 3h': 'ÈÅéÂéª3ÊôÇÈñì',
        'Last 3d': 'ÈÅéÂéª3Êó•',
        'Last 1w': 'ÈÅéÂéª1ÈÄ±',
        'Last 2w': 'ÈÅéÂéª2ÈÄ±'
      },
      'ko': {
        'Today': 'Ïò§Îäò',
        'Yesterday': 'Ïñ¥Ï†ú',
        'Last 24h': 'ÏßÄÎÇú 24ÏãúÍ∞Ñ',
        'Last 12h': 'ÏßÄÎÇú 12ÏãúÍ∞Ñ',
        'Last 6h': 'ÏßÄÎÇú 6ÏãúÍ∞Ñ',
        'Last 3h': 'ÏßÄÎÇú 3ÏãúÍ∞Ñ',
        'Last 3d': 'ÏßÄÎÇú 3Ïùº',
        'Last 1w': 'ÏßÄÎÇú 1Ï£º',
        'Last 2w': 'ÏßÄÎÇú 2Ï£º'
      },
      'zh': {
        'Today': '‰ªäÂ§©',
        'Yesterday': 'Êò®Â§©',
        'Last 24h': 'ËøáÂéª24Â∞èÊó∂',
        'Last 12h': 'ËøáÂéª12Â∞èÊó∂',
        'Last 6h': 'ËøáÂéª6Â∞èÊó∂',
        'Last 3h': 'ËøáÂéª3Â∞èÊó∂',
        'Last 3d': 'ËøáÂéª3Â§©',
        'Last 1w': 'ËøáÂéª1Âë®',
        'Last 2w': 'ËøáÂéª2Âë®'
      },
      'ar': {
        'Today': 'ÿßŸÑŸäŸàŸÖ',
        'Yesterday': 'ÿ£ŸÖÿ≥',
        'Last 24h': 'ÿ¢ÿÆÿ± 24 ÿ≥ÿßÿπÿ©',
        'Last 12h': 'ÿ¢ÿÆÿ± 12 ÿ≥ÿßÿπÿ©',
        'Last 6h': 'ÿ¢ÿÆÿ± 6 ÿ≥ÿßÿπÿßÿ™',
        'Last 3h': 'ÿ¢ÿÆÿ± 3 ÿ≥ÿßÿπÿßÿ™',
        'Last 3d': 'ÿ¢ÿÆÿ± 3 ÿ£ŸäÿßŸÖ',
        'Last 1w': 'ÿ¢ÿÆÿ± ÿ£ÿ≥ÿ®Ÿàÿπ',
        'Last 2w': 'ÿ¢ÿÆÿ± ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ'
      },
      'hi': {
        'Today': '‡§Ü‡§ú',
        'Yesterday': '‡§ï‡§≤',
        'Last 24h': '‡§™‡§ø‡§õ‡§≤‡•á 24 ‡§ò‡§Ç‡§ü‡•á',
        'Last 12h': '‡§™‡§ø‡§õ‡§≤‡•á 12 ‡§ò‡§Ç‡§ü‡•á',
        'Last 6h': '‡§™‡§ø‡§õ‡§≤‡•á 6 ‡§ò‡§Ç‡§ü‡•á',
        'Last 3h': '‡§™‡§ø‡§õ‡§≤‡•á 3 ‡§ò‡§Ç‡§ü‡•á',
        'Last 3d': '‡§™‡§ø‡§õ‡§≤‡•á 3 ‡§¶‡§ø‡§®',
        'Last 1w': '‡§™‡§ø‡§õ‡§≤‡§æ 1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π',
        'Last 2w': '‡§™‡§ø‡§õ‡§≤‡•á 2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π'
      }
    };

    const languageTranslations = periodTranslations[language] || periodTranslations['en'];
    return languageTranslations[description] || description;
  }

  getLocalizedDate(startTimestamp, endTimestamp, language, timezone = 'UTC') {
    const start = moment.unix(startTimestamp).tz(timezone);
    const end = moment.unix(endTimestamp).tz(timezone);
    
    // Language-specific date formatting
    const dateFormats = {
      'en': () => `${start.format('MMM DD, YYYY HH:mm')} - ${end.format('MMM DD, YYYY HH:mm')}`,
      'es': () => `${start.format('DD MMM YYYY HH:mm')} - ${end.format('DD MMM YYYY HH:mm')}`,
      'fr': () => `${start.format('DD MMM YYYY HH:mm')} - ${end.format('DD MMM YYYY HH:mm')}`,
      'de': () => `${start.format('DD. MMM YYYY HH:mm')} - ${end.format('DD. MMM YYYY HH:mm')}`,
      'it': () => `${start.format('DD MMM YYYY HH:mm')} - ${end.format('DD MMM YYYY HH:mm')}`,
      'pt': () => `${start.format('DD MMM YYYY HH:mm')} - ${end.format('DD MMM YYYY HH:mm')}`,
      'ru': () => `${this.formatRussianDate(start)} - ${this.formatRussianDate(end)}`,
      'uk': () => `${this.formatUkrainianDate(start)} - ${this.formatUkrainianDate(end)}`,
      'pl': () => `${this.formatPolishDate(start)} - ${this.formatPolishDate(end)}`,
      'nl': () => `${start.format('DD MMM YYYY HH:mm')} - ${end.format('DD MMM YYYY HH:mm')}`,
      'tr': () => `${this.formatTurkishDate(start)} - ${this.formatTurkishDate(end)}`,
      'ja': () => `${this.formatJapaneseDate(start)} - ${this.formatJapaneseDate(end)}`,
      'ko': () => `${this.formatKoreanDate(start)} - ${this.formatKoreanDate(end)}`,
      'zh': () => `${this.formatChineseDate(start)} - ${this.formatChineseDate(end)}`,
      'ar': () => `${this.formatArabicDate(start)} - ${this.formatArabicDate(end)}`,
      'hi': () => `${this.formatHindiDate(start)} - ${this.formatHindiDate(end)}`
    };

    const formatter = dateFormats[language] || dateFormats['en'];
    return formatter();
  }

  formatUkrainianDate(momentObj) {
    const months = ['—Å—ñ—á', '–ª—é—Ç', '–±–µ—Ä', '–∫–≤—ñ—Ç', '—Ç—Ä–∞–≤', '—á–µ—Ä–≤', '–ª–∏–ø', '—Å–µ—Ä–ø', '–≤–µ—Ä', '–∂–æ–≤—Ç', '–ª–∏—Å—Ç', '–≥—Ä—É–¥'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  formatRussianDate(momentObj) {
    const months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  formatPolishDate(momentObj) {
    const months = ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'pa≈∫', 'lis', 'gru'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  formatTurkishDate(momentObj) {
    const months = ['Oca', '≈ûub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Aƒüu', 'Eyl', 'Eki', 'Kas', 'Ara'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  formatJapaneseDate(momentObj) {
    const day = momentObj.date();
    const month = momentObj.month() + 1;
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${year}Âπ¥${month}Êúà${day}Êó• ${time}`;
  }

  formatKoreanDate(momentObj) {
    const day = momentObj.date();
    const month = momentObj.month() + 1;
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${year}ÎÖÑ ${month}Ïõî ${day}Ïùº ${time}`;
  }

  formatChineseDate(momentObj) {
    const day = momentObj.date();
    const month = momentObj.month() + 1;
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${year}Âπ¥${month}Êúà${day}Êó• ${time}`;
  }

  formatArabicDate(momentObj) {
    const months = ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà', 'ŸäŸàŸÑŸäŸà', 'ÿ£ÿ∫ÿ≥ÿ∑ÿ≥', 'ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±', 'ÿ£ŸÉÿ™Ÿàÿ®ÿ±', 'ŸÜŸàŸÅŸÖÿ®ÿ±', 'ÿØŸäÿ≥ŸÖÿ®ÿ±'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  formatHindiDate(momentObj) {
    const months = ['‡§ú‡§®', '‡§´‡§∞', '‡§Æ‡§æ‡§∞', '‡§Ö‡§™‡•ç‡§∞', '‡§Æ‡§à', '‡§ú‡•Ç‡§®', '‡§ú‡•Å‡§≤', '‡§Ö‡§ó', '‡§∏‡§ø‡§§', '‡§Ö‡§ï‡•ç‡§ü', '‡§®‡§µ', '‡§¶‡§ø‡§∏'];
    const day = momentObj.date();
    const month = months[momentObj.month()];
    const year = momentObj.year();
    const time = momentObj.format('HH:mm');
    return `${day} ${month} ${year} ${time}`;
  }

  async isAdmin(bot, chatId, userId) {
    try {
      // Get chat member info
      const chatMember = await bot.getChatMember(chatId, userId);
      
      // Check if user is admin, creator, or bot owner
      return chatMember.status === 'creator' || 
             chatMember.status === 'administrator' ||
             chatMember.can_manage_chat === true;
    } catch (error) {
      logger.error('Error checking admin status:', error);
      return false;
    }
  }

  async isBotOwner(userId) {
    // Check if the user is the bot owner (you can set this in environment variables)
    const botOwnerId = process.env.BOT_OWNER_ID;
    if (!botOwnerId) return false;
    
    // Parse BOT_OWNER_ID as comma-separated list of IDs
    const ownerIds = botOwnerId.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
    return ownerIds.includes(userId);
  }
}

module.exports = CommandHandler;
